
/*
const 修饰指针的三种情况:
    1. const修饰指针 ---常量指针
        语法:const int *p = &a;
        特点:指针的指向可以修改,但是指针指向的值不可以修改;
    2. const修饰常量 ---指针常量
        语法:int * const p = &a;
        特点:指针的指向不可以修改,但是指针指向的值可以修改;
    3. const 既修饰指针, 又修饰常量
        语法:const int * const p = &a;
        特点:指针的指向,指针指向的值, 都不可以修改;
*/

#include <iostream>
using namespace std;

int main()
{

    // 声明: p是内存地址, *p是内存地址中的值

    /*
    1. const修饰指针 ---常量指针(指针指向的地址中的值是常量(*p1 是常量,不可更改),可以修改指针的指向, 但是原本指向的值不可以修改)
        语法:const int *p = &a;
        特点:指针的指向可以修改,但是指针指向的值不可以修改;
        如何记忆: const 修饰了指针, 因此指针指向的值不可以修改
    */ 
    int a = 10;
    int b = 20;
    const int *p1 = &a;
    p1 = &b;    // 正确, 指针的指向了b
    *p1 = 20000; // 错误, 指针指向的值不可以修改


    /*
    2. const修饰常量 ---指针常量(指针中的地址是固定的,不可更改,即指针的指向不可以修改)
        语法:int * const p = &a;
        特点:指针的指向不可以修改,但是指针指向的值可以修改;
        如何记忆: const 修饰了常量, 因此指针的指向不可以修改
    */ 
    int a = 10;
    int b = 20;
    int * const p2  = &a;
    *p2 = 20000; // 正确, 指针指向的值可以修改
    p2 = &b;    // 错误, 指针的指向不可以修改
    


    /*
    3. const 既修饰指针, 又修饰常量 (指针存放的内存地址固定, 内存地址中的值是常量,不可以更改)
         语法:const int * const p = &a;
         特点:指针的指向,指针指向的值, 都不可以修改;
    */ 
    int a = 10;
    int b = 20;
    const int * const p3  = &a;
    *p3 = 20000; // 错误, 指针指向的值不可以修改
    p3 = &b;    // 错误, 指针的指向不可以修改

    // system("pause");
    return 0;
} 

